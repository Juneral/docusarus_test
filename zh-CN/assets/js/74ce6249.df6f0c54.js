"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[51669],{35318:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(27378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1726:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});t(27378);var a=t(35318);function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}const i={sidebar_position:3},o="I18n lifecycles",s={unversionedId:"api/plugin-methods/i18n-lifecycles",id:"version-2.0.0-rc.1/api/plugin-methods/i18n-lifecycles",title:"I18n lifecycles",description:"Plugins use these lifecycles to load i18n-related data.",source:"@site/versioned_docs/version-2.0.0-rc.1/api/plugin-methods/i18n-lifecycles.md",sourceDirName:"api/plugin-methods",slug:"/api/plugin-methods/i18n-lifecycles",permalink:"/docusarus_test/zh-CN/docs/api/plugin-methods/i18n-lifecycles",draft:!1,editUrl:"https://crowdin.com/project/docusaurus-v2/zh-CN",tags:[],version:"2.0.0-rc.1",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"api",previous:{title:"Extending infrastructure",permalink:"/docusarus_test/zh-CN/docs/api/plugin-methods/extend-infrastructure"},next:{title:"Static methods",permalink:"/docusarus_test/zh-CN/docs/api/plugin-methods/static-methods"}},c={},p=[{value:"<code>getTranslationFiles({content})</code>",id:"getTranslationFiles",level:2},{value:"<code>translateContent({content,translationFiles})</code>",id:"translateContent",level:2},{value:"<code>translateThemeConfig({themeConfig,translationFiles})</code>",id:"translateThemeConfig",level:2},{value:"<code>async getDefaultCodeTranslationMessages()</code>",id:"getDefaultCodeTranslationMessages",level:2}],u={toc:p};function d(e){var{components:n}=e,t=l(e,["components"]);return(0,a.kt)("wrapper",r({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",r({},{id:"i18n-lifecycles"}),"I18n lifecycles"),(0,a.kt)("p",null,"Plugins use these lifecycles to load i18n-related data."),(0,a.kt)("h2",r({},{id:"getTranslationFiles"}),(0,a.kt)("inlineCode",{parentName:"h2"},"getTranslationFiles({content})")),(0,a.kt)("p",null,"Plugins declare the JSON translation files they want to use."),(0,a.kt)("p",null,"Returns translation files ",(0,a.kt)("inlineCode",{parentName:"p"},"{path: string, content: ChromeI18nJSON}"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"path"),": relative to the plugin localized folder ",(0,a.kt)("inlineCode",{parentName:"li"},"i18n/[locale]/[pluginName]"),". Extension ",(0,a.kt)("inlineCode",{parentName:"li"},".json")," should be omitted to remain generic."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"content"),": using the Chrome i18n JSON format.")),(0,a.kt)("p",null,"These files will be written by the ",(0,a.kt)("a",r({parentName:"p"},{href:"/docusarus_test/zh-CN/docs/cli#docusaurus-write-translations-sitedir"}),(0,a.kt)("inlineCode",{parentName:"a"},"write-translations")," CLI")," to the plugin i18n subfolder, and will be read in the appropriate locale before calling ",(0,a.kt)("a",r({parentName:"p"},{href:"#translateContent"}),(0,a.kt)("inlineCode",{parentName:"a"},"translateContent()"))," and ",(0,a.kt)("a",r({parentName:"p"},{href:"#translateThemeConfig"}),(0,a.kt)("inlineCode",{parentName:"a"},"translateThemeConfig()"))),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-js"}),"module.exports = function (context, options) {\n  return {\n    name: 'my-plugin',\n    // highlight-start\n    async getTranslationFiles({content}) {\n      return [\n        {\n          path: 'sidebar-labels',\n          content: {\n            someSidebarLabel: {\n              message: 'Some Sidebar Label',\n              description: 'A label used in my plugin in the sidebar',\n            },\n            someLabelFromContent: content.myLabel,\n          },\n        },\n      ];\n    },\n    // highlight-end\n  };\n};\n")),(0,a.kt)("h2",r({},{id:"translateContent"}),(0,a.kt)("inlineCode",{parentName:"h2"},"translateContent({content,translationFiles})")),(0,a.kt)("p",null,"Translate the plugin content, using the localized translation files."),(0,a.kt)("p",null,"Returns the localized plugin content."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"contentLoaded()")," lifecycle will be called with the localized plugin content returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"translateContent()"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-js"}),"module.exports = function (context, options) {\n  return {\n    name: 'my-plugin',\n    // highlight-start\n    translateContent({content, translationFiles}) {\n      const myTranslationFile = translationFiles.find(\n        (f) => f.path === 'myTranslationFile',\n      );\n      return {\n        ...content,\n        someContentLabel: myTranslationFile.someContentLabel.message,\n      };\n    },\n    // highlight-end\n  };\n};\n")),(0,a.kt)("h2",r({},{id:"translateThemeConfig"}),(0,a.kt)("inlineCode",{parentName:"h2"},"translateThemeConfig({themeConfig,translationFiles})")),(0,a.kt)("p",null,"Translate the site ",(0,a.kt)("inlineCode",{parentName:"p"},"themeConfig")," labels, using the localized translation files."),(0,a.kt)("p",null,"Returns the localized ",(0,a.kt)("inlineCode",{parentName:"p"},"themeConfig"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-js"}),"module.exports = function (context, options) {\n  return {\n    name: 'my-theme',\n    // highlight-start\n    translateThemeConfig({themeConfig, translationFiles}) {\n      const myTranslationFile = translationFiles.find(\n        (f) => f.path === 'myTranslationFile',\n      );\n      return {\n        ...themeConfig,\n        someThemeConfigLabel: myTranslationFile.someThemeConfigLabel.message,\n      };\n    },\n    // highlight-end\n  };\n};\n")),(0,a.kt)("h2",r({},{id:"getDefaultCodeTranslationMessages"}),(0,a.kt)("inlineCode",{parentName:"h2"},"async getDefaultCodeTranslationMessages()")),(0,a.kt)("p",null,"Themes using the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Translate>")," API can provide default code translation messages."),(0,a.kt)("p",null,"It should return messages in ",(0,a.kt)("inlineCode",{parentName:"p"},"Record<string, string>"),", where keys are translation IDs and values are messages (without the description) localized using the site's current locale."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",r({parentName:"pre"},{className:"language-js"}),"module.exports = function (context, options) {\n  return {\n    name: 'my-theme',\n    // highlight-start\n    async getDefaultCodeTranslationMessages() {\n      return readJsonFile(`${context.i18n.currentLocale}.json`);\n    },\n    // highlight-end\n  };\n};\n")))}d.isMDXComponent=!0}}]);